Subject: [PATCH] models.py finish for dev
---
Index: crm/migrations/0002_bookingservices_group_position_service_and_more.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/crm/migrations/0002_bookingservices_group_position_service_and_more.py b/crm/migrations/0002_bookingservices_group_position_service_and_more.py
new file mode 100644
--- /dev/null	(revision 93fd42f0cac3c044f1157cff3b2074c49327e303)
+++ b/crm/migrations/0002_bookingservices_group_position_service_and_more.py	(revision 93fd42f0cac3c044f1157cff3b2074c49327e303)
@@ -0,0 +1,199 @@
+# Generated by Django 4.1.6 on 2023-02-05 11:41
+
+from django.conf import settings
+import django.contrib.auth.models
+from django.db import migrations, models
+import django.db.models.deletion
+
+
+class Migration(migrations.Migration):
+
+    dependencies = [
+        ('auth', '0012_alter_user_first_name_max_length'),
+        ('crm', '0001_initial'),
+    ]
+
+    operations = [
+        migrations.CreateModel(
+            name='BookingServices',
+            fields=[
+                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('name', models.CharField(max_length=256, verbose_name='Название')),
+                ('start_time_booking', models.DateTimeField()),
+                ('finish_time_booking', models.DateTimeField()),
+            ],
+            options={
+                'verbose_name': 'Сервис',
+                'verbose_name_plural': 'Сервисы',
+            },
+        ),
+        migrations.CreateModel(
+            name='Group',
+            fields=[
+                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('name', models.CharField(max_length=256, verbose_name='Название группы')),
+                ('count_guests', models.IntegerField(default=1, verbose_name='Количество гостей')),
+                ('date_checkin', models.DateField(verbose_name='Дата заселения')),
+                ('date_checkout', models.DateField(verbose_name='Дата выселения')),
+            ],
+            options={
+                'verbose_name': 'Группа',
+                'verbose_name_plural': 'Группы',
+            },
+        ),
+        migrations.CreateModel(
+            name='Position',
+            fields=[
+                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('name', models.CharField(max_length=256, verbose_name='Должность')),
+                ('description', models.TextField(verbose_name='Описание')),
+            ],
+            options={
+                'verbose_name': 'Должность',
+                'verbose_name_plural': 'Должности',
+            },
+        ),
+        migrations.CreateModel(
+            name='Service',
+            fields=[
+                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('name', models.CharField(max_length=256, verbose_name='Название услуги')),
+                ('description', models.TextField(blank=True, null=True, verbose_name='Описание услуги')),
+            ],
+            options={
+                'verbose_name': 'Услуга',
+                'verbose_name_plural': 'Услуги',
+            },
+        ),
+        migrations.AlterModelOptions(
+            name='goods',
+            options={'verbose_name': 'Товары', 'verbose_name_plural': 'Товары'},
+        ),
+        migrations.AlterModelOptions(
+            name='groceries',
+            options={'verbose_name': 'Продукт', 'verbose_name_plural': 'Продукты'},
+        ),
+        migrations.AlterModelOptions(
+            name='hotel',
+            options={'verbose_name': 'Отель', 'verbose_name_plural': 'Отели'},
+        ),
+        migrations.AlterModelOptions(
+            name='household',
+            options={'verbose_name': 'Хозтовар', 'verbose_name_plural': 'Хозтовары'},
+        ),
+        migrations.AlterModelOptions(
+            name='room',
+            options={'verbose_name': 'Номер', 'verbose_name_plural': 'Номера'},
+        ),
+        migrations.RenameField(
+            model_name='goods',
+            old_name='cost',
+            new_name='price',
+        ),
+        migrations.AddField(
+            model_name='room',
+            name='price',
+            field=models.IntegerField(default=0, verbose_name='Цена'),
+        ),
+        migrations.AlterField(
+            model_name='goods',
+            name='name',
+            field=models.CharField(max_length=250, verbose_name='Товар'),
+        ),
+        migrations.AlterField(
+            model_name='room',
+            name='name',
+            field=models.CharField(blank=True, max_length=256, null=True, verbose_name='Название номера'),
+        ),
+        migrations.AlterField(
+            model_name='room',
+            name='number',
+            field=models.IntegerField(default=100, verbose_name='Номер'),
+        ),
+        migrations.AlterField(
+            model_name='room',
+            name='over_booking',
+            field=models.IntegerField(default=1, verbose_name='Дополнительные места в номер'),
+        ),
+        migrations.CreateModel(
+            name='Sauna',
+            fields=[
+                ('bookingservices_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='crm.bookingservices')),
+            ],
+            options={
+                'verbose_name': 'Сауна',
+                'verbose_name_plural': 'Сауны',
+            },
+            bases=('crm.bookingservices',),
+        ),
+        migrations.CreateModel(
+            name='YogaHall',
+            fields=[
+                ('bookingservices_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='crm.bookingservices')),
+            ],
+            options={
+                'verbose_name': 'Йога хол',
+                'verbose_name_plural': 'Йога холы',
+            },
+            bases=('crm.bookingservices',),
+        ),
+        migrations.CreateModel(
+            name='Guest',
+            fields=[
+                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('name', models.CharField(max_length=256, verbose_name='Имя')),
+                ('surname', models.CharField(max_length=256, verbose_name='Фамилия')),
+                ('telephone', models.CharField(max_length=256, verbose_name='Телефон')),
+                ('date_checkin', models.DateField(blank=True, verbose_name='Дата заселения')),
+                ('date_checkout', models.DateField(blank=True, verbose_name='Дата выселения')),
+                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='crm.group')),
+            ],
+            options={
+                'verbose_name': 'Гость',
+                'verbose_name_plural': 'Гости',
+            },
+        ),
+        migrations.CreateModel(
+            name='Employee',
+            fields=[
+                ('user_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
+                ('name', models.CharField(max_length=256, verbose_name='Имя')),
+                ('surname', models.CharField(max_length=256, verbose_name='Фамилия')),
+                ('position', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='crm.position')),
+            ],
+            options={
+                'verbose_name': 'Сотрудник',
+                'verbose_name_plural': 'Сотрудники',
+            },
+            bases=('auth.user',),
+            managers=[
+                ('objects', django.contrib.auth.models.UserManager()),
+            ],
+        ),
+        migrations.CreateModel(
+            name='Cashier',
+            fields=[
+                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('incomes', models.IntegerField(verbose_name='Входящие средства')),
+                ('outcomes', models.IntegerField(verbose_name='Расходы')),
+                ('datetime', models.DateTimeField(auto_now=True, verbose_name='Дата и время операции')),
+                ('employee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='crm.employee')),
+                ('group', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='crm.group')),
+                ('guest', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='crm.guest')),
+                ('services', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='crm.service')),
+            ],
+            options={
+                'verbose_name': 'Касса',
+            },
+        ),
+        migrations.AddField(
+            model_name='bookingservices',
+            name='group',
+            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='crm.group'),
+        ),
+        migrations.AddField(
+            model_name='bookingservices',
+            name='guest',
+            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='crm.guest'),
+        ),
+    ]
Index: crm/models.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/crm/models.py b/crm/models.py
--- a/crm/models.py	(revision 4f1819900fc091d94037533608bc4a6086ab853e)
+++ b/crm/models.py	(revision 93fd42f0cac3c044f1157cff3b2074c49327e303)
@@ -9,18 +9,54 @@
     def __str__(self):
         return self.name
 
+    class Meta:
+        verbose_name = "Должность"
+        verbose_name_plural = "Должности"
+
 
 class Employee(User):
+    name = models.CharField("Имя", max_length=256)
+    surname = models.CharField("Фамилия", max_length=256)
     position = models.ForeignKey(Position, on_delete=models.CASCADE)
 
     def __str__(self):
-        return self.username
+        return f"{self.name}, {self.surname}"
 
     class Meta:
         verbose_name = "Сотрудник"
         verbose_name_plural = "Сотрудники"
 
 
+class Group(models.Model):
+    name = models.CharField("Название группы", max_length=256)
+    count_guests = models.IntegerField("Количество гостей", default=1)
+    date_checkin = models.DateField("Дата заселения")
+    date_checkout = models.DateField("Дата выселения")
+
+    def __str__(self):
+        return self.name
+
+    class Meta:
+        verbose_name = "Группа"
+        verbose_name_plural = "Группы"
+
+
+class Guest(models.Model):
+    name = models.CharField("Имя", max_length=256)
+    surname = models.CharField("Фамилия", max_length=256)
+    telephone = models.CharField("Телефон", max_length=256)
+    group = models.ForeignKey(Group, on_delete=models.CASCADE)
+    date_checkin = models.DateField("Дата заселения", blank=True)
+    date_checkout = models.DateField("Дата выселения", blank=True)
+
+    def __str__(self):
+        return f"{self.name}, {self.surname}"
+
+    class Meta:
+        verbose_name = "Гость"
+        verbose_name_plural = "Гости"
+
+
 class Hotel(models.Model):
     name = models.CharField("Имя отеля", max_length=256)
 
@@ -33,11 +69,12 @@
 
 
 class Room(models.Model):
-    number = models.IntegerField("Номер")
+    number = models.IntegerField("Номер", default=100)
     name = models.CharField("Название номера", max_length=256, null=True, blank=True)
     hotel = models.ForeignKey(Hotel, on_delete=models.CASCADE)
     capacity = models.IntegerField("Количество мест", default=2)
-    over_booking = models.IntegerField("Дополнительные места в номер")
+    over_booking = models.IntegerField("Дополнительные места в номер", default=1)
+    price = models.IntegerField("Цена", default=0)
 
     def __str__(self):
         return self.name
@@ -50,7 +87,7 @@
 class Goods(models.Model):
     name = models.CharField("Товар", max_length=250)
     count = models.IntegerField("Объем/количество")
-    cost = models.IntegerField("Стоимость")
+    price = models.IntegerField("Стоимость")
 
     def __str__(self):
         return self.name
@@ -61,8 +98,67 @@
 
 
 class Groceries(Goods):
-    pass
+    class Meta:
+        verbose_name = "Продукт"
+        verbose_name_plural = "Продукты"
 
 
 class Household(Goods):
-    pass
+    class Meta:
+        verbose_name = "Хозтовар"
+        verbose_name_plural = "Хозтовары"
+
+
+class BookingServices(models.Model):
+    name = models.CharField("Название", max_length=256)
+    start_time_booking = models.DateTimeField()
+    finish_time_booking = models.DateTimeField()
+    group = models.ForeignKey(Group, on_delete=models.CASCADE, null=True, blank=True)
+    guest = models.ForeignKey(Guest, on_delete=models.CASCADE, null=True, blank=True)
+
+    def __str__(self):
+        return self.name
+
+    class Meta:
+        verbose_name = "Сервис"
+        verbose_name_plural = "Сервисы"
+
+
+class YogaHall(BookingServices):
+    class Meta:
+        verbose_name = "Йога хол"
+        verbose_name_plural = "Йога холы"
+
+
+class Sauna(BookingServices):
+    class Meta:
+        verbose_name = "Сауна"
+        verbose_name_plural = "Сауны"
+
+
+class Service(models.Model):
+    name = models.CharField("Название услуги", max_length=256)
+    description = models.TextField("Описание услуги", null=True, blank=True)
+
+    def __str__(self):
+        return self.name
+
+    class Meta:
+        verbose_name = "Услуга"
+        verbose_name_plural = "Услуги"
+
+
+class Cashier(models.Model):
+    incomes = models.IntegerField("Входящие средства")
+    outcomes = models.IntegerField("Расходы")
+    datetime = models.DateTimeField("Дата и время операции", auto_now=True)
+    employee = models.ForeignKey(Employee, on_delete=models.CASCADE)
+    guest = models.ForeignKey(Guest, on_delete=models.CASCADE)
+    group = models.ForeignKey(Group, on_delete=models.CASCADE, null=True, blank=True)
+    services = models.ForeignKey(Service, on_delete=models.CASCADE)
+
+    def __str__(self):
+        return f"{self.services}, {self.guest.name}"
+
+    class Meta:
+        verbose_name = "Касса"
